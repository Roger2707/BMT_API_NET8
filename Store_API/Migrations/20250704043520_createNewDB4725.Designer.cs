// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store_API.Data;

#nullable disable

namespace Store_API.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250704043520_createNewDB4725")]
    partial class createNewDB4725
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasAlternateKey("MessageId", "ConsumerId");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasFilter("[OutboxId] IS NOT NULL");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasFilter("[InboxMessageId] IS NOT NULL AND [InboxConsumerId] IS NOT NULL");

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Store_API.Models.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Store_API.Models.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Store_API.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            Country = "Japan",
                            Name = "Yonex"
                        },
                        new
                        {
                            Id = new Guid("5378f75e-4a8a-4531-86f5-0c9b2f8a1b6d"),
                            Country = "Taiwan",
                            Name = "Victor"
                        },
                        new
                        {
                            Id = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            Country = "China",
                            Name = "Lining"
                        });
                });

            modelBuilder.Entity("Store_API.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Name = "Racket"
                        },
                        new
                        {
                            Id = new Guid("9d19c053-8b47-4e6d-9e9a-4188cb50d2e6"),
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = new Guid("8a0ef9d4-79bb-418f-9e12-8f5f6df62049"),
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = new Guid("c1dcf6b8-4c24-493c-a828-7b1e4cc26a6b"),
                            Name = "Items"
                        },
                        new
                        {
                            Id = new Guid("af0b3a7a-5898-43cf-8f98-d0c5712ec5f3"),
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("Store_API.Models.Inventory.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-1111-1111-1111-111111111111"),
                            ProductDetailId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Quantity = 10,
                            Updated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999999-1111-1111-8888-111111111111"),
                            ProductDetailId = new Guid("e2c8ff1c-2db0-4a02-9a2a-7b8d05eeb6d4"),
                            Quantity = 15,
                            Updated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarehouseId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("99999999-1111-7777-1111-111111111111"),
                            ProductDetailId = new Guid("5f3c3a57-1f41-4e32-9c7a-12d4686dbf8b"),
                            Quantity = 18,
                            Updated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarehouseId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("99999999-6666-1111-1111-111111111111"),
                            ProductDetailId = new Guid("f01d30c9-b2a1-4d37-95b4-018cbacfd6ef"),
                            Quantity = 20,
                            Updated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999999-1111-5555-8888-111111111111"),
                            ProductDetailId = new Guid("51fa47d3-9baf-4e71-bdd8-6206533a126c"),
                            Quantity = 3,
                            Updated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999999-1111-5555-8888-111111111158"),
                            ProductDetailId = new Guid("51fa47d3-9baf-4e71-bdd8-6206533a126c"),
                            Quantity = 2,
                            Updated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarehouseId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Store_API.Models.Inventory.StockHold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StockHolds");
                });

            modelBuilder.Entity("Store_API.Models.Inventory.StockHoldItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StockHoldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StockHoldId");

                    b.ToTable("StockHoldItem");
                });

            modelBuilder.Entity("Store_API.Models.Inventory.StockTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-1111-3333-2222-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Quantity = 8,
                            TransactionType = 1,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999999-1111-3333-4545-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Quantity = 3,
                            TransactionType = 1,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999999-2222-3333-4545-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Quantity = 1,
                            TransactionType = 0,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("88888888-1111-3333-2222-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("e2c8ff1c-2db0-4a02-9a2a-7b8d05eeb6d4"),
                            Quantity = 15,
                            TransactionType = 1,
                            WarehouseId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("99999333-befa-3333-4545-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("5f3c3a57-1f41-4e32-9c7a-12d4686dbf8b"),
                            Quantity = 18,
                            TransactionType = 1,
                            WarehouseId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("99999875-abef-3333-8217-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("f01d30c9-b2a1-4d37-95b4-018cbacfd6ef"),
                            Quantity = 20,
                            TransactionType = 1,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999875-abcd-aaaa-8217-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("51fa47d3-9baf-4e71-bdd8-6206533a126c"),
                            Quantity = 4,
                            TransactionType = 1,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999875-abcd-aaaa-8217-222111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("51fa47d3-9baf-4e71-bdd8-6206533a126c"),
                            Quantity = 2,
                            TransactionType = 1,
                            WarehouseId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("99999875-abcd-aaaa-8217-111111111988"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ProductDetailId = new Guid("51fa47d3-9baf-4e71-bdd8-6206533a126c"),
                            Quantity = 1,
                            TransactionType = 0,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("Store_API.Models.Inventory.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdminOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSuperAdminOnly = false,
                            Location = "Ho Chi Minh City",
                            Name = "HCM Warehouse"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSuperAdminOnly = false,
                            Location = "Thu Duc City",
                            Name = "Thu Duc Warehouse"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSuperAdminOnly = false,
                            Location = "Vung Tau City",
                            Name = "HHT Warehouse"
                        });
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DeliveryFee")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.ShippingOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CODAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GHNOrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingStatus")
                        .HasColumnType("int");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToWard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("Store_API.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BasketHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Store_API.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Attack - Dominate - Conquers",
                            Name = "Astrox 99 Pro (Ver.2021)"
                        },
                        new
                        {
                            Id = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Two Faces - Expolosive Attack - Solid Hard Defend",
                            Name = "Duora Z Strike (Ver.2017)"
                        },
                        new
                        {
                            Id = new Guid("7d9e6679-7425-40de-944b-e07fc1f90ae7"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Controls - Focus - Feel",
                            Name = "ArcSaber 11 Pro (Ver.2021)"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Racket Choosing by The Olympic Champion (2020) Viktor Axelsen",
                            Name = "Axtrox 100ZZ (Ver.Kurenai)"
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "King Double - Speed - Power",
                            Name = "Nanoflare 1000Z"
                        },
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            BrandId = new Guid("5378f75e-4a8a-4531-86f5-0c9b2f8a1b6d"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "All England Champ (2021) Racket Chosen",
                            Name = "Thuskter Ryuga Metalic (Ver.2023)"
                        },
                        new
                        {
                            Id = new Guid("9b9f0b80-4f3d-11ec-81d3-0242ac130003"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "New Shape - New Tech - New Feelings",
                            Name = "Axtrox 88D Pro (Ver.2024)"
                        },
                        new
                        {
                            Id = new Guid("00112233-4455-6677-8899-aabbccddeeff"),
                            BrandId = new Guid("5378f75e-4a8a-4531-86f5-0c9b2f8a1b6d"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Speed - Control - Attack",
                            Name = "Brave Sword 12 (Ver.55th 2024)"
                        },
                        new
                        {
                            Id = new Guid("b3e2f5f0-7e44-4e06-b69e-8f87be0c30f7"),
                            BrandId = new Guid("5378f75e-4a8a-4531-86f5-0c9b2f8a1b6d"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Speed - Control - Attack",
                            Name = "Thuskter Falcon White (Ver. Limited TYZ)"
                        },
                        new
                        {
                            Id = new Guid("cb3b0e7d-5ad3-4ec7-9b9a-4f06efb27c03"),
                            BrandId = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chosen By World Champion 2021 - Loh Kean Yew",
                            Name = "Axforce 90"
                        },
                        new
                        {
                            Id = new Guid("e029d3c5-b6b3-4e31-bada-1e6b7d5af7c8"),
                            BrandId = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Modern Technologies - Powerful Attack",
                            Name = "Axforce 100 (Ver.Kirin)"
                        },
                        new
                        {
                            Id = new Guid("8a97f9a6-221d-4f5b-bc37-6e5cb7a979b6"),
                            BrandId = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Blow White Attack",
                            Name = "Techtonic 9"
                        },
                        new
                        {
                            Id = new Guid("dd36bf61-fc77-4cfb-82e1-6b2ff6f9b1d4"),
                            BrandId = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chosen by The World Champion (2014, 2015), The OLP Champion (2016) - Chen Long",
                            Name = "Flame N55"
                        },
                        new
                        {
                            Id = new Guid("a2cf7e92-29fd-4d61-90b3-d3f2f8a7e9c6"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("9d19c053-8b47-4e6d-9e9a-4188cb50d2e6"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Smooth - Jump - Reach the win",
                            Name = "Comfort Z"
                        },
                        new
                        {
                            Id = new Guid("68d0b964-88b1-4c56-a6ea-7253c8a94b4d"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("9d19c053-8b47-4e6d-9e9a-4188cb50d2e6"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "The upgrade of Comfort Z Version",
                            Name = "Comfort Z3"
                        },
                        new
                        {
                            Id = new Guid("4d21b8e5-8a14-4b37-b84b-3d1c2e2e5f76"),
                            BrandId = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            CategoryId = new Guid("9d19c053-8b47-4e6d-9e9a-4188cb50d2e6"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Smooth - Jump - Reach the win",
                            Name = "Accelarate Booster (Ver.2022)"
                        },
                        new
                        {
                            Id = new Guid("2f8c6a10-5633-4b91-90a1-7c924df78e68"),
                            BrandId = new Guid("b07c2e46-76a5-4b8a-92fb-7cc62e13b5cb"),
                            CategoryId = new Guid("9d19c053-8b47-4e6d-9e9a-4188cb50d2e6"),
                            Created = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Speed - Jump - Dominate",
                            Name = "Accelarate Advanced (Ver.2024)"
                        });
                });

            modelBuilder.Entity("Store_API.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Color = "#880808",
                            ExtraName = "Red Tiger",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1734927449/products/astrox 99 pro 2021/hgkgglo91lbmjhxby5h0.webp",
                            Price = 4200000.0,
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            PublicId = "products/astrox 99 pro 2021/hgkgglo91lbmjhxby5h0",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e2c8ff1c-2db0-4a02-9a2a-7b8d05eeb6d4"),
                            Color = "#fff",
                            ExtraName = "White Tiger",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1734927449/products/astrox 99 pro 2021/hgkgglo91lbmjhxby5h0.webp",
                            Price = 4300000.0,
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            PublicId = "products/astrox 99 pro 2021/hgkgglo91lbmjhxby5h0",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5f3c3a57-1f41-4e32-9c7a-12d4686dbf8b"),
                            Color = "#fff",
                            ExtraName = "Chou Tien Chen Signature!",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735828714/products/duora z strike %28ver.2017%29/he85nkkpfkdc6gh2w9ak.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828716/products/duora z strike %28ver.2017%29/ez7dx5lamzyjkwrs4zya.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828717/products/duora z strike %28ver.2017%29/zv47em4nf8cfex61lwh1.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828718/products/duora z strike %28ver.2017%29/jlj5w0sliaquoxfxziaf.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828719/products/duora z strike %28ver.2017%29/u8mj5igvuamhih3mgely.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828720/products/duora z strike %28ver.2017%29/qnelzoomlaqll2aikfbj.jpg",
                            Price = 4150000.0,
                            ProductId = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            PublicId = "products/duora z strike %28ver.2017%29/he85nkkpfkdc6gh2w9ak,products/duora z strike %28ver.2017%29/ez7dx5lamzyjkwrs4zya,products/duora z strike %28ver.2017%29/zv47em4nf8cfex61lwh1,products/duora z strike %28ver.2017%29/jlj5w0sliaquoxfxziaf,products/duora z strike %28ver.2017%29/u8mj5igvuamhih3mgely,products/duora z strike %28ver.2017%29/qnelzoomlaqll2aikfbj",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7a3f4036-942f-4f8a-a823-0f3c5c791e20"),
                            Color = "#880808",
                            ExtraName = "Ver.2021 - Zheng Si Wei",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735828775/products/arcsaber 11 pro %28ver.2021%29/ljra5olhsvaxrjptk0re.webp,https://res.cloudinary.com/duat1htay/image/upload/v1735828777/products/arcsaber 11 pro %28ver.2021%29/uskrx81pgum1grefnhcx.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828778/products/arcsaber 11 pro %28ver.2021%29/ewj0zhky5g7e5wvsi9sv.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828779/products/arcsaber 11 pro %28ver.2021%29/grokd1zbead4twuac0ly.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735828780/products/arcsaber 11 pro %28ver.2021%29/wmnhk6gabpegyoq3lcpp.webp,https://res.cloudinary.com/duat1htay/image/upload/v1735828780/products/arcsaber 11 pro %28ver.2021%29/xkl3k09jjrixdaq8qypu.jpg",
                            Price = 4250000.0,
                            ProductId = new Guid("7d9e6679-7425-40de-944b-e07fc1f90ae7"),
                            PublicId = "arcsaber 11 pro %28ver.2021%29/ljra5olhsvaxrjptk0re,products/arcsaber 11 pro %28ver.2021%29/uskrx81pgum1grefnhcx,products/arcsaber 11 pro %28ver.2021%29/ewj0zhky5g7e5wvsi9sv,products/arcsaber 11 pro %28ver.2021%29/grokd1zbead4twuac0ly,products/arcsaber 11 pro %28ver.2021%29/wmnhk6gabpegyoq3lcpp,products/arcsaber 11 pro %28ver.2021%29/xkl3k09jjrixdaq8qypu",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c9b74e77-dc8b-4c4e-96c9-d6b2e8adf2cf"),
                            Color = "#4169E1",
                            ExtraName = "Navy Blue",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729152726/ldpbvqnabfaq7o2uggia.webp",
                            Price = 4500000.0,
                            ProductId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            PublicId = "ldpbvqnabfaq7o2uggia",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f01d30c9-b2a1-4d37-95b4-018cbacfd6ef"),
                            Color = "#880808",
                            ExtraName = "Ver.Kurenai",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729152726/ldpbvqnabfaq7o2uggia.webp",
                            Price = 4450000.0,
                            ProductId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            PublicId = "ldpbvqnabfaq7o2uggia",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2e8c3bc1-23e5-4df9-822c-2f7d9dd4f5f3"),
                            Color = "#FDDA0D",
                            ExtraName = "The Yellow Flash",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735830149/products/nanoflare 1000z/yj14npg3jorqi1dhbygd.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830150/products/nanoflare 1000z/ptbxakwyi6dtxsedhog4.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830151/products/nanoflare 1000z/rm4ymkkeupgo5jfuzrts.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830152/products/nanoflare 1000z/syrhneosnjsnoyuwwdte.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830153/products/nanoflare 1000z/f8hfmdfuhux7bvs4s1zs.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830154/products/nanoflare 1000z/tyv2w5kyqdonv5qib1rt.jpg",
                            Price = 4350000.0,
                            ProductId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            PublicId = "products/nanoflare 1000z/yj14npg3jorqi1dhbygd,products/nanoflare 1000z/ptbxakwyi6dtxsedhog4,products/nanoflare 1000z/rm4ymkkeupgo5jfuzrts,products/nanoflare 1000z/syrhneosnjsnoyuwwdte,products/nanoflare 1000z/f8hfmdfuhux7bvs4s1zs,products/nanoflare 1000z/tyv2w5kyqdonv5qib1rt",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("51fa47d3-9baf-4e71-bdd8-6206533a126c"),
                            Color = "#880808",
                            ExtraName = "Limited Edition (2025)",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735830149/products/nanoflare 1000z/yj14npg3jorqi1dhbygd.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830150/products/nanoflare 1000z/ptbxakwyi6dtxsedhog4.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830151/products/nanoflare 1000z/rm4ymkkeupgo5jfuzrts.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830152/products/nanoflare 1000z/syrhneosnjsnoyuwwdte.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830153/products/nanoflare 1000z/f8hfmdfuhux7bvs4s1zs.jpg,https://res.cloudinary.com/duat1htay/image/upload/v1735830154/products/nanoflare 1000z/tyv2w5kyqdonv5qib1rt.jpg",
                            Price = 15000000.0,
                            ProductId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            PublicId = "products/nanoflare 1000z/yj14npg3jorqi1dhbygd,products/nanoflare 1000z/ptbxakwyi6dtxsedhog4,products/nanoflare 1000z/rm4ymkkeupgo5jfuzrts,products/nanoflare 1000z/syrhneosnjsnoyuwwdte,products/nanoflare 1000z/f8hfmdfuhux7bvs4s1zs,products/nanoflare 1000z/tyv2w5kyqdonv5qib1rt",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6a4e5f76-3c84-4f4e-bb76-61768c5d3e7d"),
                            Color = "#FF5733",
                            ExtraName = "Lee Zii Ja Chosen",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729152504/bobdvzdutlsnhkgd3csa.webp",
                            Price = 3600000.0,
                            ProductId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            PublicId = "bobdvzdutlsnhkgd3csa",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d55b3f65-68b2-4c5e-85ae-8f2a3bfb6b8f"),
                            Color = "#7393B3",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729152808/erovfedlbzb0xkzqglbj.jpg",
                            Price = 4200000.0,
                            ProductId = new Guid("9b9f0b80-4f3d-11ec-81d3-0242ac130003"),
                            PublicId = "erovfedlbzb0xkzqglbj",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e4d849aa-7683-47e5-9f45-2e4894a3ddf4"),
                            Color = "#4169E1",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153834/rweggufmgnga3zjklf2f.jpg",
                            Price = 2800000.0,
                            ProductId = new Guid("00112233-4455-6677-8899-aabbccddeeff"),
                            PublicId = "rweggufmgnga3zjklf2f",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3b6e123a-f75c-4de5-86a5-d2b5e8b6c9d2"),
                            Color = "#fff",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153808/cy4dqkjmsqakqxsqonl5.jpg",
                            Price = 2700000.0,
                            ProductId = new Guid("b3e2f5f0-7e44-4e06-b69e-8f87be0c30f7"),
                            PublicId = "cy4dqkjmsqakqxsqonl5",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0c462b3e-61c9-4e34-bab2-7d82c4c5e8e1"),
                            Color = "#880808",
                            ExtraName = "Ver.Tiger Max",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153857/algdodmsmknzhilm9wds.webp",
                            Price = 3850000.0,
                            ProductId = new Guid("cb3b0e7d-5ad3-4ec7-9b9a-4f06efb27c03"),
                            PublicId = "algdodmsmknzhilm9wds",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("8b7f69d4-459c-45c8-bf38-9f5b214a9d7e"),
                            Color = "#4169E1",
                            ExtraName = "Ver.Dragon Max",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153857/algdodmsmknzhilm9wds.webp",
                            Price = 3880000.0,
                            ProductId = new Guid("cb3b0e7d-5ad3-4ec7-9b9a-4f06efb27c03"),
                            PublicId = "algdodmsmknzhilm9wds",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("a2e987b6-fdbc-4d9a-a86b-6f9cb4e7f236"),
                            Color = "#880808",
                            ExtraName = "Ver.Kirin",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1734927477/products/axforce 100 %28kirin%29/czjdbrlre4jnbrhfabyi.jpg",
                            Price = 4250000.0,
                            ProductId = new Guid("e029d3c5-b6b3-4e31-bada-1e6b7d5af7c8"),
                            PublicId = "products/axforce 100 %28kirin%29/czjdbrlre4jnbrhfabyi",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("13c87621-8b94-4515-90d4-35f5f8a4b23e"),
                            Color = "#fff",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153705/w9s0ruep5gxnelaunfgq.jpg",
                            Price = 3300000.0,
                            ProductId = new Guid("8a97f9a6-221d-4f5b-bc37-6e5cb7a979b6"),
                            PublicId = "w9s0ruep5gxnelaunfgq",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2fa0f68b-efc9-4a92-b4c3-8f62c4d8e5a1"),
                            Color = "#880808",
                            ExtraName = "Chen Long Edition (Rio 2016)",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153773/cetkfwcafc8xliwnim9n.jpg",
                            Price = 5000000.0,
                            ProductId = new Guid("dd36bf61-fc77-4cfb-82e1-6b2ff6f9b1d4"),
                            PublicId = "cetkfwcafc8xliwnim9n",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("5d479eab-b8c6-4df1-99f7-df3a7b2e6f87"),
                            Color = "#333",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153525/bpjcwixbyweafni7t5sz.jpg",
                            Price = 2200000.0,
                            ProductId = new Guid("a2cf7e92-29fd-4d61-90b3-d3f2f8a7e9c6"),
                            PublicId = "bpjcwixbyweafni7t5sz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7f1b9d38-3b5d-474f-832b-85c7c5d2a9b4"),
                            Color = "#880808",
                            ExtraName = "Ver.Dark Red",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1750748254/products/comfort z3/stpn0skt1oehm2onmyf9.jpg",
                            Price = 2850000.0,
                            ProductId = new Guid("68d0b964-88b1-4c56-a6ea-7253c8a94b4d"),
                            PublicId = "bpjcwixbyweafni7t5sz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b9f376e1-6a5d-4b34-9a1c-3f9e8a7b2d5c"),
                            Color = "#4169E1",
                            ExtraName = "Ver.Dark Blue",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1750748254/products/comfort z3/stpn0skt1oehm2onmyf9.jpg",
                            Price = 2830000.0,
                            ProductId = new Guid("68d0b964-88b1-4c56-a6ea-7253c8a94b4d"),
                            PublicId = "bpjcwixbyweafni7t5sz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("41d3f8b7-c1e2-456f-a9c8-72b3d2e5f9a4"),
                            Color = "#FF69B4",
                            ExtraName = "Ver.Pink",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1750748254/products/comfort z3/stpn0skt1oehm2onmyf9.jpg",
                            Price = 2800000.0,
                            ProductId = new Guid("68d0b964-88b1-4c56-a6ea-7253c8a94b4d"),
                            PublicId = "bpjcwixbyweafni7t5sz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9d5a72c4-1f87-4b3a-b7e8-d4c5f9a2e3b6"),
                            Color = "#4169E1",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1734926089/products/hxlh389m9vsug2zumawz.jpg",
                            Price = 1500000.0,
                            ProductId = new Guid("4d21b8e5-8a14-4b37-b84b-3d1c2e2e5f76"),
                            PublicId = "products/hxlh389m9vsug2zumawz",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("63e7c5d2-9b4f-4f38-b7d1-85f9a3e2c4d8"),
                            Color = "#fff",
                            ExtraName = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1729153621/dn25ivc2gpbcytdfqfim.webp",
                            Price = 1700000.0,
                            ProductId = new Guid("2f8c6a10-5633-4b91-90a1-7c924df78e68"),
                            PublicId = "dn25ivc2gpbcytdfqfim",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Store_API.Models.ProductTechnology", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TechnologyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "TechnologyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ProductTechnologies");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3251)
                        },
                        new
                        {
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d8"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3263)
                        },
                        new
                        {
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d7"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3330)
                        },
                        new
                        {
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d6"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3333)
                        },
                        new
                        {
                            ProductId = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d5"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3335)
                        },
                        new
                        {
                            ProductId = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d4"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3340)
                        },
                        new
                        {
                            ProductId = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d3"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3342)
                        },
                        new
                        {
                            ProductId = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d2"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3344)
                        },
                        new
                        {
                            ProductId = new Guid("7d9e6679-7425-40de-944b-e07fc1f90ae7"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3346)
                        },
                        new
                        {
                            ProductId = new Guid("7d9e6679-7425-40de-944b-e07fc1f90ae7"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d1"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3349)
                        },
                        new
                        {
                            ProductId = new Guid("7d9e6679-7425-40de-944b-e07fc1f90ae7"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d0"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3351)
                        },
                        new
                        {
                            ProductId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3353)
                        },
                        new
                        {
                            ProductId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d8"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3355)
                        },
                        new
                        {
                            ProductId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d7"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3357)
                        },
                        new
                        {
                            ProductId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            TechnologyId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d5"),
                            Created = new DateTime(2025, 7, 4, 4, 35, 16, 818, DateTimeKind.Utc).AddTicks(3359)
                        });
                });

            modelBuilder.Entity("Store_API.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PercentageDiscount")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e5d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            BrandId = new Guid("e1798a79-327e-4851-9028-b1c9b2e82ec6"),
                            CategoryId = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            PercentageDiscount = 15.0,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Store_API.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Star")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductDetailId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Star = 4.0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ProductDetailId = new Guid("e2c8ff1c-2db0-4a02-9a2a-7b8d05eeb6d4"),
                            ProductId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Star = 4.5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ProductDetailId = new Guid("5f3c3a57-1f41-4e32-9c7a-12d4686dbf8b"),
                            ProductId = new Guid("6f9619ff-8b86-d011-b42d-00cf4fc964ff"),
                            Star = 4.7999999999999998,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            ProductDetailId = new Guid("6a4e5f76-3c84-4f4e-bb76-61768c5d3e7d"),
                            ProductId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            Star = 4.5,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Store_API.Models.Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d9"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735800437/technologies/tech1_qoof2s.jpg",
                            Name = "ENHANCED ARCSABER FRAME"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d8"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735800437/technologies/tech2_nhiopm.jpg",
                            Name = "CONTROL-ASSIST BUMPER"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d7"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735800436/technologies/tech3_olpj1g.png",
                            Name = "POCKETING BOOSTER"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d6"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735800436/technologies/tech3_olpj1g.png",
                            Name = "ISOMETRIC PLUS"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d5"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735801835/tech5_axkpsh.webp",
                            Name = "DUAL OPTIMUM SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d4"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735801836/tech6_foheeo.webp",
                            Name = "ISOMETRIC "
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d3"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735801835/tech7_qfd4za.webp",
                            Name = "AERO-BOX FRAME"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d2"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735801835/tech8_mqshpr.webp",
                            Name = "NEW Built-in T-Joint"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d1"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735801836/tech9_jfuxth.jpg",
                            Name = "ROTATIONAL GENARATOR SYSTEM"
                        },
                        new
                        {
                            Id = new Guid("3f8d2c42-bf26-4f93-b2d4-7e3c75e7a6d0"),
                            Description = "",
                            ImageUrl = "https://res.cloudinary.com/duat1htay/image/upload/v1735801837/tech10_myratn.jpg",
                            Name = "ENERGY BOOST CAP PLUS"
                        });
                });

            modelBuilder.Entity("Store_API.Models.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Store_API.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fe3530f-ab90-4b40-affb-459bd118bc74",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "spadmin@example.com",
                            EmailConfirmed = true,
                            FullName = "SuperAdmin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SPADMIN@EXAMPLE.COM",
                            NormalizedUserName = "SPADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0YWf8ywgecEIbQ84tgT8Sz9zTfE80bYezuqZzHAHDukv2pte1BqVLayrPJYDZ4LA==",
                            PhoneNumberConfirmed = false,
                            Provider = "System",
                            SecurityStamp = "48e687ca-4c43-42f8-9d04-9709077a2ddf",
                            TwoFactorEnabled = false,
                            UserName = "spadmin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ed59af1-916d-4b40-9e79-7d375220f313",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin1@example.com",
                            EmailConfirmed = true,
                            FullName = "Admin1",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE02uAg0gTG/LfDDpt/MNAsvywamLoyYpM+2SDRptp9V1dJsoSjg2dFMsUEMILu4Nw==",
                            PhoneNumberConfirmed = false,
                            Provider = "System",
                            SecurityStamp = "695765b4-aa7c-411c-9a14-0b6bd55f872c",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "585ad4a6-cf4e-407c-b35a-77e649b29842",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            FullName = "Admin2",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2",
                            PasswordHash = "AQAAAAIAAYagAAAAENoDVn9RiyBDLTUzd/ldYdfXVBJPCcDrZaV+DI1qpYnJg15QgmbH5G5W09nyIhHROw==",
                            PhoneNumberConfirmed = false,
                            Provider = "System",
                            SecurityStamp = "ebe8cfe4-1f3b-4dc4-b34b-6ac68711e410",
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5f5cb6a-3769-4623-973f-d1681ffb73f5",
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admi3n@example.com",
                            EmailConfirmed = true,
                            FullName = "Admin3",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN3",
                            PasswordHash = "AQAAAAIAAYagAAAAEKLuKMcbookzR+GZQp3uPVd7D2RQLeDKXraA7S8NmSTLWlIZRzb4/WJXrPAYFRD3aA==",
                            PhoneNumberConfirmed = false,
                            Provider = "System",
                            SecurityStamp = "e8b2c33f-1284-4da4-b9ec-225ec933e520",
                            TwoFactorEnabled = false,
                            UserName = "admin3"
                        });
                });

            modelBuilder.Entity("Store_API.Models.Users.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Store_API.Models.Users.UserWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("UserWarehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d86af4a2-9e1f-4127-90e8-ee08e5ffeec7"),
                            UserId = 2,
                            WarehouseId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("a34d831a-fab7-44a6-9612-adc9963501ec"),
                            UserId = 3,
                            WarehouseId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("8964a57c-b5fb-4201-be39-eb3f9be49ac8"),
                            UserId = 4,
                            WarehouseId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Store_API.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Store_API.Models.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store_API.Models.Basket", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", "User")
                        .WithOne("Basket")
                        .HasForeignKey("Store_API.Models.Basket", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store_API.Models.BasketItem", b =>
                {
                    b.HasOne("Store_API.Models.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Store_API.Models.Inventory.Stock", b =>
                {
                    b.HasOne("Store_API.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Store_API.Models.Inventory.StockHoldItem", b =>
                {
                    b.HasOne("Store_API.Models.Inventory.StockHold", "StockHold")
                        .WithMany("Items")
                        .HasForeignKey("StockHoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockHold");
                });

            modelBuilder.Entity("Store_API.Models.Inventory.StockTransaction", b =>
                {
                    b.HasOne("Store_API.Models.ProductDetail", "ProductDetail")
                        .WithMany()
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.Order", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Store_API.Models.OrderAggregate.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("District")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("District");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StreetAddress");

                            b1.Property<string>("Ward")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Ward");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ShippingAddress")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("Store_API.Models.OrderAggregate.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Store_API.Models.OrderAggregate.ProductOrderItem", "ProductOrderItem", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<Guid>("ProductDetailId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ProductDetailId");

                            b1.Property<string>("ProductImageUrl")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductImageUrl");

                            b1.Property<string>("ProductName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductName");

                            b1.Property<double>("ProductPrice")
                                .HasColumnType("float")
                                .HasColumnName("ProductPrice");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("Order");

                    b.Navigation("ProductOrderItem")
                        .IsRequired();
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.ShippingOrder", b =>
                {
                    b.HasOne("Store_API.Models.OrderAggregate.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Store_API.Models.Product", b =>
                {
                    b.HasOne("Store_API.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Store_API.Models.ProductDetail", b =>
                {
                    b.HasOne("Store_API.Models.Product", "Product")
                        .WithMany("Details")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store_API.Models.ProductTechnology", b =>
                {
                    b.HasOne("Store_API.Models.Product", "Product")
                        .WithMany("Technologies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Technology", "Technology")
                        .WithMany("Products")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Store_API.Models.Promotion", b =>
                {
                    b.HasOne("Store_API.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Store_API.Models.Users.UserAddress", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Store_API.Models.OrderAggregate.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("UserAddressId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("District")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("District");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("StreetAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StreetAddress");

                            b1.Property<string>("Ward")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Ward");

                            b1.HasKey("UserAddressId");

                            b1.ToTable("UserAddresses");

                            b1.WithOwner()
                                .HasForeignKey("UserAddressId");
                        });

                    b.Navigation("ShippingAddress")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store_API.Models.Users.UserWarehouse", b =>
                {
                    b.HasOne("Store_API.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_API.Models.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Store_API.Models.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Store_API.Models.Inventory.StockHold", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Store_API.Models.OrderAggregate.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Store_API.Models.Product", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Store_API.Models.Technology", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Store_API.Models.Users.User", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Orders");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
